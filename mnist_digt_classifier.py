# -*- coding: utf-8 -*-
"""MNIST_Digt_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dpij9_K1m8YIvOuzRI_if8u8Gx77dNVs
"""

import pandas as pd
import numpy as np

from sklearn.datasets import fetch_openml
mnist=fetch_openml('mnist_784',version=1)

mnist.keys()

X,y=mnist["data"],mnist["target"]

X.shape

y.shape

import matplotlib.pyplot as mp
import matplotlib.pyplot as plt

# s=X[0]
some_digit=X.iloc[0].to_numpy()
some_digit_image=some_digit.reshape(28,28)
# digit.reshape(28,28)
some_digit_image

plt.imshow(some_digit_image,cmap=mp.cm.binary,interpolation="nearest")
plt.show()

y[0]

y=y.astype(np.uint8)

X_train,X_test,y_train,y_test=X[:60000],X[60000:],y[:60000],y[60000:]

y_train_5=(y_train==5)
y_test_5=(y_test==5)

from sklearn.linear_model import SGDClassifier
sgd_clf=SGDClassifier(random_state=42)
sgd_clf.fit(X_train,y_train_5)

sgd_clf.predict([some_digit])

from sklearn.model_selection import StratifiedKFold
from sklearn.base import clone

skfolds=StratifiedKFold(n_splits=3,shuffle=True,random_state=42)

for train_index,test_index in skfolds.split(X_train,y_train_5):
  clone_clf=clone(sgd_clf)
  # print(test_index)
  X_train_folds=X_train.iloc[train_index]
  y_train_folds=y_train_5.iloc[train_index]
  X_test_folds=X_train.iloc[test_index]
  y_test_folds=y_train_5.iloc[test_index]

  clone_clf.fit(X_train_folds,y_train_folds)
  y_pred=clone_clf.predict(X_test_folds)
  n_correct=sum(y_pred==y_test_folds)
  print(n_correct/len(y_pred))

from sklearn.model_selection import cross_val_score
cross_val_score(sgd_clf,X_train,y_train_5,cv=3,scoring="accuracy")

from sklearn.model_selection import cross_val_predict
y_train_pred=cross_val_predict(sgd_clf,X_train,y_train_5,cv=3)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_train_5,y_train_pred)

y_train_perfect=y_train_5
confusion_matrix(y_train_5,y_train_perfect)

from sklearn.metrics import precision_score,recall_score
precision_score(y_train_5,y_train_pred)

recall_score(y_train_5,y_train_pred)

from sklearn.metrics import f1_score

f1_score(y_train_5,y_train_pred)

y_scores=cross_val_predict(sgd_clf,X_train,y_train_5,cv=3,method="decision_function")

from sklearn.metrics import precision_recall_curve
precision,recalls,thresholds=precision_recall_curve(y_train_5,y_scores)

precision,recalls,thresholds

def plot_curve(precision,recalls,thresholds):
  plt.plot(thresholds,precision[:-1],"b--",label="Precison")
  plt.plot(thresholds,recalls[:-1],"g-",label="Recall")

plot_curve(precision,recalls,thresholds)

"""MultiClass Classification"""

some_digit=X.iloc[2].to_numpy()
some_digit_image=some_digit.reshape(28,28)
plt.imshow(some_digit_image,cmap=mp.cm.binary)

sgd_clf.fit(X_train,y_train)

sgd_clf.predict([some_digit])

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train.astype(np.float64))
cross_val_score(sgd_clf,X_train_scaled,y_train,cv=3,scoring="accuracy")

y_train_pred=cross_val_predict(sgd_clf,X_train_scaled,y_train,cv=3)
conf_mx=confusion_matrix(y_train,y_train_pred)
conf_mx

plt.matshow(conf_mx,cmap=plt.cm.gray)
plt.show()

row_sums=conf_mx.sum(axis=1,keepdims=True)
norm_conf_mx=conf_mx/row_sums

np.fill_diagonal(norm_conf_mx,0)
plt.matshow(norm_conf_mx,cmap=plt.cm.gray)
plt.show()

